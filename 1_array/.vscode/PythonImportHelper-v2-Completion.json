[
    {
        "label": "apply_limit",
        "importPath": "give_bmi",
        "description": "give_bmi",
        "isExtraImport": true,
        "detail": "give_bmi",
        "documentation": {}
    },
    {
        "label": "give_bmi",
        "importPath": "give_bmi",
        "description": "give_bmi",
        "isExtraImport": true,
        "detail": "give_bmi",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "slice_me",
        "importPath": "array2D",
        "description": "array2D",
        "isExtraImport": true,
        "detail": "array2D",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ft_load",
        "importPath": "load_image",
        "description": "load_image",
        "isExtraImport": true,
        "detail": "load_image",
        "documentation": {}
    },
    {
        "label": "give_bmi",
        "kind": 2,
        "importPath": "ex00.give_bmi",
        "description": "ex00.give_bmi",
        "peekOfCode": "def give_bmi(\n    height: list[int | float], weight: list[int | float]\n) -> list[int | float]:\n    \"\"\"gives the BMI of a person based on their height and weight.\"\"\"\n    bmis = []\n    try:\n        for i in range(len(height)):\n            bmis.append(weight[i] / height[i] ** 2)\n    except Exception as e:\n        print(\"Error:\", e)",
        "detail": "ex00.give_bmi",
        "documentation": {}
    },
    {
        "label": "apply_limit",
        "kind": 2,
        "importPath": "ex00.give_bmi",
        "description": "ex00.give_bmi",
        "peekOfCode": "def apply_limit(bmi: list[int | float], limit: int) -> list[bool]:\n    \"\"\"\n    takes a list of BMI values and a limit, and returns a list of booleans\n    indicating whether each BMI value is above the limit.\n    \"\"\"\n    return [val > limit for val in bmi]",
        "detail": "ex00.give_bmi",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "ex00.tester",
        "description": "ex00.tester",
        "peekOfCode": "height = [2.71, 1.15]\nweight = [165.3, 38.4]\nbmi = give_bmi(height, weight)\nprint(bmi, type(bmi))\nprint(apply_limit(bmi, 26))",
        "detail": "ex00.tester",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "ex00.tester",
        "description": "ex00.tester",
        "peekOfCode": "weight = [165.3, 38.4]\nbmi = give_bmi(height, weight)\nprint(bmi, type(bmi))\nprint(apply_limit(bmi, 26))",
        "detail": "ex00.tester",
        "documentation": {}
    },
    {
        "label": "bmi",
        "kind": 5,
        "importPath": "ex00.tester",
        "description": "ex00.tester",
        "peekOfCode": "bmi = give_bmi(height, weight)\nprint(bmi, type(bmi))\nprint(apply_limit(bmi, 26))",
        "detail": "ex00.tester",
        "documentation": {}
    },
    {
        "label": "slice_me",
        "kind": 2,
        "importPath": "ex01.array2D",
        "description": "ex01.array2D",
        "peekOfCode": "def slice_me(family: list, start: int, end: int) -> list:\n    \"\"\"slice_me returns a slice of a 2D array\"\"\"\n    try:\n        arr = np.array(family)\n        print(\"my shape is:\", arr.shape)\n        print(\"my new shape is:\", arr[start:end].shape)\n    except Exception as e:\n        print(e)\n        return None\n    return arr[start:end]",
        "detail": "ex01.array2D",
        "documentation": {}
    },
    {
        "label": "family",
        "kind": 5,
        "importPath": "ex01.tester",
        "description": "ex01.tester",
        "peekOfCode": "family = [[1.80, 78.4], [2.15, 102.7], [2.10, 98.5], [1.88, 75.2]]\nprint(slice_me(family, 0, 2))\nprint(slice_me(family, 1, -2))",
        "detail": "ex01.tester",
        "documentation": {}
    },
    {
        "label": "ft_load",
        "kind": 2,
        "importPath": "ex02.load_image",
        "description": "ex02.load_image",
        "peekOfCode": "def ft_load(path: str) -> list:\n    \"\"\"loads an image\"\"\"\n    try:\n        img = Image.open(path)\n        img = img.convert(\"RGB\")\n        img = np.array(img)\n        print(\"The shape of the image is:\", img.shape)\n        return img\n    except Exception as e:\n        print(\"Error: \", e)",
        "detail": "ex02.load_image",
        "documentation": {}
    },
    {
        "label": "ft_load",
        "kind": 2,
        "importPath": "ex03.load_image",
        "description": "ex03.load_image",
        "peekOfCode": "def ft_load(path: str) -> list:\n    \"\"\"loads an image\"\"\"\n    try:\n        img = Image.open(path)\n        img = img.convert(\"RGB\")\n        img = np.array(img)\n        print(\"The shape of the image is:\", img.size)\n        return img\n    except Exception as e:\n        print(\"Error: \", e)",
        "detail": "ex03.load_image",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ex03.zoom",
        "description": "ex03.zoom",
        "peekOfCode": "def main():\n    print(\"Zoom\")\n    ft_load(\"animal.jpeg\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "ex03.zoom",
        "documentation": {}
    }
]